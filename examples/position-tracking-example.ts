/**
 * Example: S·ª≠ d·ª•ng Position Tracking & Prediction
 * 
 * V√≠ d·ª• n√†y minh h·ªça c√°ch s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng m·ªõi:
 * - Real-time position tracking
 * - Movement prediction
 * - Collision detection
 */

import { BaseStrategy } from "../src/strategies/baseStrategy";
import { GameState, BotDecision, BotAction, Direction } from "../src/types";
import { 
  getPositionInDirectionSmallStep,
  canMoveToPositionPrecise,
  isPositionCollidingWithWalls,
  getDirectionToTarget,
} from "../src/utils";

/**
 * Strategy v√≠ d·ª• v·ªõi position tracking
 */
export class SmartMoveStrategy extends BaseStrategy {
  name = "SmartMove";
  priority = 50;

  evaluate(gameState: GameState): BotDecision | null {
    const currentPos = gameState.currentBot.position;
    
    // T√¨m m·ª•c ti√™u (v√≠ d·ª•: item g·∫ßn nh·∫•t)
    const items = gameState.map.items;
    if (items.length === 0) {
      return null;
    }
    
    const targetItem = items[0]!;
    const direction = getDirectionToTarget(currentPos, targetItem.position);
    
    // Option 2: Predict v·ªã tr√≠ ti·∫øp theo TR∆Ø·ªöC KHI di chuy·ªÉn
    const predictedPos = getPositionInDirectionSmallStep(
      currentPos, 
      direction, 
      3 // 3px m·ªói b∆∞·ªõc
    );
    
    console.log(`üîÆ Predicted position: (${predictedPos.x}, ${predictedPos.y})`);
    
    // Ki·ªÉm tra collision v·ªõi predicted position
    if (isPositionCollidingWithWalls(predictedPos, gameState, 30)) {
      console.log("‚ùå Predicted position s·∫Ω va ch·∫°m v·ªõi t∆∞·ªùng!");
      
      // Th·ª≠ c√°c h∆∞·ªõng kh√°c
      const alternativeDirections = [
        Direction.UP,
        Direction.DOWN,
        Direction.LEFT,
        Direction.RIGHT,
      ];
      
      for (const altDir of alternativeDirections) {
        const altPos = getPositionInDirectionSmallStep(currentPos, altDir, 3);
        
        if (canMoveToPositionPrecise(altPos, gameState)) {
          console.log(`‚úÖ T√¨m th·∫•y h∆∞·ªõng thay th·∫ø: ${altDir}`);
          return this.createDecision(
            BotAction.MOVE,
            this.priority,
            `Di chuy·ªÉn h∆∞·ªõng ${altDir} (tr√°nh va ch·∫°m)`,
            altDir
          );
        }
      }
      
      // Kh√¥ng t√¨m ƒë∆∞·ª£c h∆∞·ªõng n√†o, ƒë·ª©ng y√™n
      return this.createDecision(
        BotAction.STOP,
        this.priority - 10,
        "Kh√¥ng th·ªÉ di chuy·ªÉn - t·∫•t c·∫£ h∆∞·ªõng ƒë·ªÅu b·ªã ch·∫∑n",
        Direction.STOP
      );
    }
    
    // OK ƒë·ªÉ di chuy·ªÉn
    console.log(`‚úÖ Safe to move ${direction}`);
    return this.createDecision(
      BotAction.MOVE,
      this.priority,
      `Di chuy·ªÉn v·ªÅ ph√≠a item t·∫°i (${targetItem.position.x}, ${targetItem.position.y})`,
      direction,
      targetItem.position
    );
  }
}

/**
 * Example: S·ª≠ d·ª•ng v·ªõi SocketConnection
 */
export class ExampleBotWithTracking {
  private lastKnownPosition: { x: number; y: number } | null = null;
  
  setupPositionTracking(socketConnection: any) {
    // Option 1: ƒêƒÉng k√Ω callback cho position updates
    socketConnection.onPositionUpdate((x: number, y: number) => {
      console.log(`üìç Position updated from server: (${x}, ${y})`);
      this.lastKnownPosition = { x, y };
      
      // C√≥ th·ªÉ trigger re-evaluation c·ªßa AI
      this.onPositionChanged(x, y);
    });
  }
  
  private onPositionChanged(x: number, y: number) {
    console.log(`üîÑ Position changed, re-evaluating strategies...`);
    // Re-run AI decision making v·ªõi v·ªã tr√≠ m·ªõi
  }
  
  makeMove(socketConnection: any, direction: Direction) {
    // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
    const currentPos = socketConnection.getCurrentPosition();
    
    if (!currentPos) {
      console.log("‚ö†Ô∏è Ch∆∞a c√≥ th√¥ng tin v·ªã tr√≠");
      return;
    }
    
    console.log(`üìç Current position: (${currentPos.x}, ${currentPos.y})`);
    
    // Predict v·ªã tr√≠ ti·∫øp theo
    const predictedPos = this.predictPosition(currentPos, direction);
    console.log(`üîÆ Predicted position: (${predictedPos.x}, ${predictedPos.y})`);
    
    // G·ª≠i l·ªánh di chuy·ªÉn (SocketConnection s·∫Ω t·ª± predict internally)
    socketConnection.move(direction);
  }
  
  private predictPosition(
    currentPos: { x: number; y: number },
    direction: Direction
  ): { x: number; y: number } {
    const MOVE_STEP = 3;
    
    switch (direction) {
      case Direction.UP:
        return { x: currentPos.x, y: currentPos.y - MOVE_STEP };
      case Direction.DOWN:
        return { x: currentPos.x, y: currentPos.y + MOVE_STEP };
      case Direction.LEFT:
        return { x: currentPos.x - MOVE_STEP, y: currentPos.y };
      case Direction.RIGHT:
        return { x: currentPos.x + MOVE_STEP, y: currentPos.y };
      default:
        return currentPos;
    }
  }
}

/**
 * Example: Spam-safe movement
 */
export class SpamSafeMovement {
  private moveQueue: Direction[] = [];
  private isMoving: boolean = false;
  
  /**
   * Th√™m move v√†o queue v√† x·ª≠ l√Ω an to√†n
   */
  queueMove(direction: Direction, socketConnection: any, gameState: GameState) {
    this.moveQueue.push(direction);
    
    if (!this.isMoving) {
      this.processNextMove(socketConnection, gameState);
    }
  }
  
  private async processNextMove(socketConnection: any, gameState: GameState) {
    if (this.moveQueue.length === 0) {
      this.isMoving = false;
      return;
    }
    
    this.isMoving = true;
    const direction = this.moveQueue.shift()!;
    
    // Get current position
    const currentPos = socketConnection.getCurrentPosition();
    if (!currentPos) {
      this.isMoving = false;
      return;
    }
    
    // Predict and validate
    const predictedPos = getPositionInDirectionSmallStep(currentPos, direction, 3);
    
    if (canMoveToPositionPrecise(predictedPos, gameState)) {
      console.log(`‚úÖ Safe move to (${predictedPos.x}, ${predictedPos.y})`);
      socketConnection.move(direction);
      
      // Wait for server confirmation (200ms throttle)
      await this.sleep(250);
      
      // Process next move
      this.processNextMove(socketConnection, gameState);
    } else {
      console.log(`‚ùå Unsafe move blocked`);
      this.isMoving = false;
      this.moveQueue = []; // Clear queue
    }
  }
  
  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
