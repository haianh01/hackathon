import { BaseStrategy } from "./baseStrategy";
import {
  GameState,
  BotDecision,
  BotAction,
  Position,
  Direction,
  Wall,
} from "../types";
import { manhattanDistance, isPositionInBounds } from "../utils/position";
import { Pathfinding } from "../utils/pathfinding";

/**
 * Strategy ƒë·∫∑t bom th√¥ng minh
 * ƒê·∫∑t bom khi:
 * 1. C√≥ th·ªÉ ph√° t∆∞·ªùng/chest g·∫ßn ƒë√≥
 * 2. C√≥ th·ªÉ t·∫•n c√¥ng ƒë·ªãch
 * 3. C√≥ th·ªÉ t·∫°o l·ªëi tho√°t an to√†n
 */
export class BombStrategy extends BaseStrategy {
  name = "BombStrategy";
  priority = 80; // ∆Øu ti√™n cao

  evaluate(gameState: GameState): BotDecision | null {
    const { currentBot, map } = gameState;
    const botPosition = currentBot.position;

    // Ki·ªÉm tra xem bot c√≥ th·ªÉ ƒë·∫∑t bom kh√¥ng
    if (currentBot.bombCount <= 0) {
      return null;
    }

    // Ki·ªÉm tra xem c√≥ bom n√†o t·∫°i v·ªã tr√≠ hi·ªán t·∫°i kh√¥ng
    const bombAtPosition = map.bombs.find(
      (bomb) =>
        bomb.position.x === botPosition.x && bomb.position.y === botPosition.y
    );
    if (bombAtPosition) {
      return null; // Kh√¥ng ƒë·∫∑t bom n·∫øu ƒë√£ c√≥ bom t·∫°i v·ªã tr√≠ n√†y
    }

    // ‚úÖ KI·ªÇM TRA NGAY: Bot c√≥ ƒë·ª©ng c·∫°nh r∆∞∆°ng kh√¥ng?
    const nearbyChests = this.findNearbyChests(gameState);
    console.log(
      `üí£ BombStrategy: Ki·ªÉm tra r∆∞∆°ng g·∫ßn - t√¨m th·∫•y ${nearbyChests.length} r∆∞∆°ng`
    );

    if (nearbyChests.length > 0) {
      console.log(
        `üí£ BombStrategy: ‚úÖ Ph√°t hi·ªán ${nearbyChests.length} r∆∞∆°ng trong t·∫ßm bom!`
      );
      console.log(
        `üí£ BombStrategy: V·ªã tr√≠ bot: (${botPosition.x}, ${botPosition.y})`
      );
      console.log(`üí£ BombStrategy: R∆∞∆°ng:`, nearbyChests);

      // Ki·ªÉm tra c√≥ l·ªëi tho√°t kh√¥ng
      const escapeRoute = this.findEscapeRoute(gameState);
      if (escapeRoute && escapeRoute.length > 0) {
        console.log(`üí£ BombStrategy: ‚úÖ C√≥ l·ªëi tho√°t - ƒê·∫∂T BOM!`);
        return this.createDecision(
          BotAction.BOMB,
          this.priority + 15,
          `ƒê·∫∑t bom ph√° ${nearbyChests.length} r∆∞∆°ng g·∫ßn ƒë√¢y`
        );
      } else {
        console.log(`üí£ BombStrategy: ‚ùå Kh√¥ng c√≥ l·ªëi tho√°t - B·ªé QUA`);
      }
    }

    // Ki·ªÉm tra kh·∫£ nƒÉng tho√°t hi·ªÉm TR∆Ø·ªöC (quan tr·ªçng nh·∫•t)
    const escapeRoute = this.findEscapeRoute(gameState);
    if (!escapeRoute || escapeRoute.length === 0) {
      console.log(`üí£ BombStrategy: Kh√¥ng c√≥ l·ªëi tho√°t an to√†n`);
      return null; // Kh√¥ng ƒë·∫∑t bom n·∫øu kh√¥ng c√≥ l·ªëi tho√°t
    }

    // T√≠nh ƒëi·ªÉm l·ª£i √≠ch c·ªßa vi·ªác ƒë·∫∑t bom
    const bombBenefit = this.calculateBombBenefit(gameState, escapeRoute);

    if (bombBenefit.score <= 0) {
      console.log(`üí£ BombStrategy: ${bombBenefit.reason}`);
      return null;
    }

    return this.createDecision(
      BotAction.BOMB,
      this.priority + Math.min(bombBenefit.score, 20), // Cap max bonus at 20
      `ƒê·∫∑t bom: ${bombBenefit.reason}`
    );
  }
  /**
   * T√≠nh to√°n l·ª£i √≠ch c·ªßa vi·ªác ƒë·∫∑t bom t·∫°i v·ªã tr√≠ hi·ªán t·∫°i
   */
  private calculateBombBenefit(
    gameState: GameState,
    escapeRoute: Position[]
  ): {
    score: number;
    reason: string;
  } {
    const { currentBot, map, enemies } = gameState;
    const botPosition = currentBot.position;
    const flameRange = currentBot.flameRange;

    let score = 0;
    const reasons: string[] = [];

    // Ki·ªÉm tra c√°c √¥ trong t·∫ßm n·ªï
    const affectedPositions = this.getAffectedPositions(
      botPosition,
      flameRange,
      map
    );

    // ƒêi·ªÉm cho vi·ªác ph√° t∆∞·ªùng/chest (chests array)
    const destructibleWalls = affectedPositions.filter((pos) => {
      const cell = (map.chests || []).find(
        (c) => c.position.x === pos.x && c.position.y === pos.y
      );
      return cell !== undefined;
    });

    if (destructibleWalls.length > 0) {
      score += destructibleWalls.length * 30; // TƒÉng l√™n ƒë·ªÉ ∆∞u ti√™n ph√° t∆∞·ªùng
      reasons.push(`ph√° ${destructibleWalls.length} t∆∞·ªùng`);
    }

    // ƒêi·ªÉm cho vi·ªác t·∫•n c√¥ng ƒë·ªãch
    const threatenedEnemies = enemies.filter((enemy) => {
      if (!enemy.isAlive) return false;
      return affectedPositions.some(
        (pos) => pos.x === enemy.position.x && pos.y === enemy.position.y
      );
    });

    if (threatenedEnemies.length > 0) {
      score += threatenedEnemies.length * 80; // TƒÉng l√™n ƒë·ªÉ ∆∞u ti√™n t·∫•n c√¥ng
      reasons.push(`t·∫•n c√¥ng ${threatenedEnemies.length} ƒë·ªãch`);
    }

    // ‚ùå B·ªé ƒëi·ªÉm ki·ªÉm so√°t kh√¥ng gian - ch·ªâ ƒë·∫∑t bom khi c√≥ m·ª•c ti√™u r√µ r√†ng
    // const controlledArea = affectedPositions.length;
    // score += controlledArea * 2;

    // Tr·ª´ ƒëi·ªÉm n·∫øu c√≥ nguy c∆° t·ª± s√°t
    const selfThreat = this.calculateSelfThreat(escapeRoute);
    score -= selfThreat * 20; // Gi·∫£m penalty ƒë·ªÉ kh√¥ng qu√° strict

    // Ki·ªÉm tra xem c√≥ item g·∫ßn ƒë√≥ kh√¥ng (tr√°nh ph√° item)
    const nearbyItems = map.items.filter((item) =>
      affectedPositions.some(
        (pos) => pos.x === item.position.x && pos.y === item.position.y
      )
    );

    if (nearbyItems.length > 0) {
      score -= nearbyItems.length * 25; // TƒÉng penalty ƒë·ªÉ tr√°nh ph√° item qu√Ω
      reasons.push(`c√≥ th·ªÉ ph√° ${nearbyItems.length} item`);
    }

    // ‚úÖ Ch·ªâ ƒë·∫∑t bom khi c√≥ l√Ω do r√µ r√†ng (ph√° t∆∞·ªùng ho·∫∑c t·∫•n c√¥ng)
    if (reasons.length === 0 || score < 10) {
      return {
        score: 0, // Kh√¥ng ƒë·ªß l√Ω do ƒë·ªÉ ƒë·∫∑t bom
        reason: "kh√¥ng c√≥ m·ª•c ti√™u c√≥ gi√° tr·ªã",
      };
    }

    return {
      score,
      reason: reasons.join(", "),
    };
  }

  /**
   * Ki·ªÉm tra v·ªã tr√≠ c√≥ h·ª£p l·ªá kh√¥ng
   */
  private isValidPosition(position: Position, map: any): boolean {
    // Ki·ªÉm tra trong bounds
    if (!isPositionInBounds(position, map.width, map.height)) {
      return false;
    }

    // Ki·ªÉm tra c√≥ t∆∞·ªùng kh√¥ng
    // If there's a solid wall here, invalid. chests are destructible so ok.
    const solid = map.walls.find(
      (w: Wall) => w.position.x === position.x && w.position.y === position.y
    );
    if (solid && !solid.isDestructible) return false;
    // if chest exists here, it's considered destructible and thus valid to place bomb on
    return true;
  }

  /**
   * T√¨m c√°c r∆∞∆°ng g·∫ßn v·ªã tr√≠ bot (trong t·∫ßm bom)
   */
  private findNearbyChests(gameState: GameState): Position[] {
    const { currentBot, map } = gameState;
    const botPosition = currentBot.position;
    const flameRange = currentBot.flameRange;
    const nearbyChests: Position[] = [];

    // L·∫•y danh s√°ch chests (c√≥ th·ªÉ l√† chests ho·∫∑c destructibleWalls)
    const chestList = map.chests || [];
    console.log(
      "%cü§™ ~ file: bombStrategy.ts:205 [] -> chestList : ",
      "color: #aded63",
      chestList
    );

    // Ki·ªÉm tra 4 h∆∞·ªõng ch√≠nh
    const directions = [
      { dx: 0, dy: -1 }, // UP
      { dx: 0, dy: 1 }, // DOWN
      { dx: -1, dy: 0 }, // LEFT
      { dx: 1, dy: 0 }, // RIGHT
    ];

    for (const dir of directions) {
      for (let i = 1; i <= flameRange; i++) {
        const checkPos = {
          x: botPosition.x + dir.dx * i,
          y: botPosition.y + dir.dy * i,
        };

        // T√¨m chest t·∫°i v·ªã tr√≠ n√†y
        const chest = chestList.find(
          (c: any) => c.position.x === checkPos.x && c.position.y === checkPos.y
        );

        if (chest) {
          nearbyChests.push(chest.position);
          break; // D·ª´ng ki·ªÉm tra h∆∞·ªõng n√†y (chest ch·∫∑n)
        }

        // ‚úÖ FALLBACK: N·∫øu kh√¥ng c√≥ chests, t√¨m destructible walls
        const destructibleWall = map.walls.find(
          (w: Wall) =>
            w.position.x === checkPos.x &&
            w.position.y === checkPos.y &&
            w.isDestructible
        );

        if (destructibleWall) {
          nearbyChests.push(destructibleWall.position);
          break; // D·ª´ng ki·ªÉm tra h∆∞·ªõng n√†y
        }

        // Ki·ªÉm tra t∆∞·ªùng c·ª©ng (ch·∫∑n flame)
        const solidWall = map.walls.find(
          (w: Wall) =>
            w.position.x === checkPos.x &&
            w.position.y === checkPos.y &&
            !w.isDestructible
        );

        if (solidWall) {
          break; // D·ª´ng ki·ªÉm tra h∆∞·ªõng n√†y
        }
      }
    }

    return nearbyChests;
  }

  /**
   * L·∫•y t·∫•t c·∫£ c√°c v·ªã tr√≠ b·ªã ·∫£nh h∆∞·ªüng b·ªüi bom
   */
  private getAffectedPositions(
    bombPosition: Position,
    flameRange: number,
    map: any
  ): Position[] {
    const positions: Position[] = [bombPosition];

    // Ki·ªÉm tra 4 h∆∞·ªõng
    const directions = [
      { dx: 0, dy: -1 }, // UP
      { dx: 0, dy: 1 }, // DOWN
      { dx: -1, dy: 0 }, // LEFT
      { dx: 1, dy: 0 }, // RIGHT
    ];

    for (const dir of directions) {
      for (let i = 1; i <= flameRange; i++) {
        const pos = {
          x: bombPosition.x + dir.dx * i,
          y: bombPosition.y + dir.dy * i,
        };

        if (!this.isValidPosition(pos, map)) {
          break; // V∆∞·ª£t ra ngo√†i map
        }

        // Ki·ªÉm tra xem c√≥ t∆∞·ªùng kh√¥ng th·ªÉ ph√° kh√¥ng
        // If there's a chest here, add and stop
        const chest = (map.chests || []).find(
          (c: any) => c.position.x === pos.x && c.position.y === pos.y
        );
        if (chest) {
          positions.push(pos);
          break;
        }

        const wall = map.walls.find(
          (w: Wall) => w.position.x === pos.x && w.position.y === pos.y
        );
        if (wall) {
          break;
        }

        positions.push(pos);
      }
    }

    return positions;
  }

  /**
   * T√≠nh to√°n nguy c∆° t·ª± s√°t d·ª±a tr√™n escape route
   */
  private calculateSelfThreat(escapeRoute: Position[]): number {
    if (!escapeRoute || escapeRoute.length === 0) {
      return 10; // Nguy c∆° cao n·∫øu kh√¥ng c√≥ l·ªëi tho√°t
    }

    if (escapeRoute.length <= 2) {
      return 5; // Nguy c∆° trung b√¨nh n·∫øu l·ªëi tho√°t qu√° g·∫ßn
    }

    return 1; // Nguy c∆° th·∫•p n·∫øu c√≥ l·ªëi tho√°t t·ªët
  }

  /**
   * T√¨m l·ªëi tho√°t sau khi ƒë·∫∑t bom
   * Returns array of safe positions (not a path)
   */
  private findEscapeRoute(gameState: GameState): Position[] | null {
    const { currentBot, map } = gameState;
    const botPosition = currentBot.position;
    const flameRange = currentBot.flameRange;

    // M√¥ ph·ªèng ƒë·∫∑t bom t·∫°i v·ªã tr√≠ hi·ªán t·∫°i
    const dangerousPositions = this.getAffectedPositions(
      botPosition,
      flameRange,
      map
    );

    // T√¨m c√°c v·ªã tr√≠ an to√†n g·∫ßn nh·∫•t
    const safePositions: Position[] = [];

    // Ki·ªÉm tra c√°c √¥ xung quanh trong ph·∫°m vi c√≥ th·ªÉ di chuy·ªÉn
    for (let x = 0; x < map.width; x++) {
      for (let y = 0; y < map.height; y++) {
        const pos = { x, y };

        // Ki·ªÉm tra v·ªã tr√≠ c√≥ an to√†n kh√¥ng
        const isDangerous = dangerousPositions.some(
          (dangerPos) => dangerPos.x === pos.x && dangerPos.y === pos.y
        );

        if (!isDangerous && this.isValidPosition(pos, map)) {
          const distance = manhattanDistance(botPosition, pos);
          if (distance <= 5) {
            // Trong ph·∫°m vi c√≥ th·ªÉ tho√°t ƒë∆∞·ª£c
            safePositions.push(pos);
          }
        }
      }
    }

    if (safePositions.length === 0) {
      return null; // Kh√¥ng c√≥ v·ªã tr√≠ an to√†n
    }

    // S·∫Øp x·∫øp theo kho·∫£ng c√°ch v√† tr·∫£ v·ªÅ danh s√°ch v·ªã tr√≠ an to√†n
    safePositions.sort((a, b) => {
      const distA = manhattanDistance(botPosition, a);
      const distB = manhattanDistance(botPosition, b);
      return distA - distB;
    });

    return safePositions; // Return array of safe positions
  }
}
