import { BaseStrategy } from "./baseStrategy";
import { GameState, BotDecision, BotAction, Direction } from "../types";
import {
  getPositionInDirection,
  canMoveTo,
  getDirectionToTarget,
} from "../utils";
import {
  isPositionSafe,
  getSafeAdjacentPositions,
  isPositionInDangerZone,
} from "../utils";

/**
 * Chi·∫øn thu·∫≠t tho√°t hi·ªÉm khi ƒëang ·ªü v√πng nguy hi·ªÉm
 */
export class EscapeStrategy extends BaseStrategy {
  name = "Escape";
  priority = 100; // ∆Øu ti√™n cao nh·∫•t

  evaluate(gameState: GameState): BotDecision | null {
    const currentPos = gameState.currentBot.position;

    // Ki·ªÉm tra xem c√≥ ƒëang ·ªü v√πng nguy hi·ªÉm kh√¥ng
    if (!isPositionInDangerZone(currentPos, gameState)) {
      console.log(
        `üõ°Ô∏è EscapeStrategy: Kh√¥ng ·ªü v√πng nguy hi·ªÉm (${gameState.map.bombs.length} bom tr√™n map)`
      );
      return null;
    }

    // T√¨m v·ªã tr√≠ an to√†n g·∫ßn nh·∫•t
    const safePositions = getSafeAdjacentPositions(currentPos, gameState);

    if (safePositions.length === 0) {
      // Kh√¥ng c√≥ v·ªã tr√≠ an to√†n l√¢n c·∫≠n, th·ª≠ t·∫•t c·∫£ h∆∞·ªõng
      const directions = [
        Direction.UP,
        Direction.DOWN,
        Direction.LEFT,
        Direction.RIGHT,
      ];

      for (const direction of directions) {
        const newPos = getPositionInDirection(currentPos, direction);
        if (canMoveTo(newPos, gameState)) {
          return this.createDecision(
            BotAction.MOVE,
            this.priority,
            "Tho√°t hi·ªÉm - di chuy·ªÉn kh·ªèi v√πng nguy hi·ªÉm",
            direction
          );
        }
      }

      // N·∫øu kh√¥ng th·ªÉ di chuy·ªÉn, ƒë·ª©ng y√™n
      return this.createDecision(
        BotAction.STOP,
        this.priority,
        "Tho√°t hi·ªÉm - kh√¥ng th·ªÉ di chuy·ªÉn, ƒë·ª©ng y√™n",
        Direction.STOP
      );
    }

    // Ch·ªçn v·ªã tr√≠ an to√†n ƒë·∫ßu ti√™n
    const targetPos = safePositions[0]!;
    const direction = getDirectionToTarget(currentPos, targetPos);

    return this.createDecision(
      BotAction.MOVE,
      this.priority,
      "Tho√°t hi·ªÉm - di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ an to√†n",
      direction,
      targetPos
    );
  }
}
