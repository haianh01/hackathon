import { BaseStrategy } from "./baseStrategy";
import {
  GameState,
  BotDecision,
  BotAction,
  Direction,
  Position,
} from "../types";
import {
  isPositionSafe,
  canMoveTo,
  getPositionInDirection,
  CELL_SIZE,
  Pathfinding,
} from "../utils";

/**
 * Chi·∫øn thu·∫≠t kh√°m ph√° - di chuy·ªÉn ƒë·∫øn v√πng ch∆∞a kh√°m ph√°
 */
export class ExploreStrategy extends BaseStrategy {
  name = "Explore";
  priority = 40;

  private lastTarget: Position | null = null;
  private lastTargetTime: number = 0;

  evaluate(gameState: GameState): BotDecision | null {
    const currentPos = gameState.currentBot.position;

    // T√¨m m·ªôt m·ª•c ti√™u kh√°m ph√° t·ªët
    const target = this.findExplorationTarget(gameState);

    if (!target) {
      console.log(
        "üß≠ ExploreStrategy: Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u kh√°m ph√° ph√π h·ª£p."
      );
      return null;
    }

    // S·ª≠ d·ª•ng Pathfinding ƒë·ªÉ t√¨m ƒë∆∞·ªùng ƒë·∫øn m·ª•c ti√™u
    const path = Pathfinding.findPath(currentPos, target, gameState);

    if (!path || path.length < 2) {
      console.log(
        `üß≠ ExploreStrategy: Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒë·∫øn m·ª•c ti√™u (${target.x}, ${target.y}).`
      );
      return null;
    }

    const finalTarget = path[path.length - 1]!;
    const score = this.calculateExploreScore(finalTarget, gameState);

    return this.createDecision(
      BotAction.MOVE,
      this.priority + Math.floor(score / 10),
      `Kh√°m ph√° - t√¨m ƒë∆∞·ªùng ƒë·∫øn v·ªã tr√≠ chi·∫øn l∆∞·ª£c (ƒëi·ªÉm: ${score.toFixed(1)})`,
      undefined, // Direction s·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ path
      finalTarget,
      path
    );
  }

  /**
   * T√¨m m·ªôt v·ªã tr√≠ m·ª•c ti√™u ƒë·ªÉ kh√°m ph√°.
   */
  private findExplorationTarget(gameState: GameState): Position | null {
    const currentPos = gameState.currentBot.position;
    const searchRadius = 8; // T√¨m ki·∫øm trong b√°n k√≠nh 8 √¥
    let bestTarget: Position | null = null;
    let bestScore = -Infinity;

    for (let dx = -searchRadius; dx <= searchRadius; dx++) {
      for (let dy = -searchRadius; dy <= searchRadius; dy++) {
        const targetPos = {
          x: currentPos.x + dx * CELL_SIZE,
          y: currentPos.y + dy * CELL_SIZE,
        };
        if (
          !canMoveTo(targetPos, gameState) ||
          !isPositionSafe(targetPos, gameState)
        )
          continue;

        const score = this.calculateExploreScore(targetPos, gameState);
        if (score > bestScore) {
          bestScore = score;
          bestTarget = targetPos;
        }
      }
    }
    return bestTarget;
  }

  /**
   * T√≠nh ƒëi·ªÉm kh√°m ph√° cho m·ªôt v·ªã tr√≠
   */
  private calculateExploreScore(position: any, gameState: GameState): number {
    let score = 10; // ƒêi·ªÉm c∆° b·∫£n cho vi·ªác di chuy·ªÉn

    // ∆Øu ti√™n di chuy·ªÉn v·ªÅ ph√≠a trung t√¢m b·∫£n ƒë·ªì
    const centerX = gameState.map.width / 2;
    const centerY = gameState.map.height / 2;
    const distanceFromCenter =
      Math.abs(position.x - centerX) + Math.abs(position.y - centerY);
    const maxDistance = gameState.map.width + gameState.map.height; // Max possible distance
    score += Math.floor((1 - distanceFromCenter / maxDistance) * 50); // 0-50 points

    // ∆Øu ti√™n v√πng c√≥ √≠t t∆∞·ªùng
    const nearbyWalls = this.countNearbyWalls(position, gameState, 2);
    score += Math.max(0, 20 - nearbyWalls * 5);

    // ∆Øu ti√™n tr√°nh xa k·∫ª th√π n·∫øu kh√¥ng c√≥ l·ª£i th·∫ø
    const nearestEnemyDistance = this.getNearestEnemyDistance(
      position,
      gameState
    );
    const DANGER_RADIUS = 3 * CELL_SIZE;
    if (nearestEnemyDistance < DANGER_RADIUS) {
      score -= ((DANGER_RADIUS - nearestEnemyDistance) / CELL_SIZE) * 10;
    }

    // ∆Øu ti√™n v√πng c√≥ v·∫≠t ph·∫©m g·∫ßn ƒë√≥
    const nearbyItems = this.countNearbyItems(position, gameState, 3);
    score += nearbyItems * 15;

    // PH·∫†T ƒêI·ªÇM C√ÅC V·ªä TR√ç D·ªÑ B·ªä K·∫∏T (TRAP PENALTY)
    // ƒê·∫øm s·ªë l·ªëi tho√°t xung quanh v·ªã tr√≠ ƒë·ªÉ ƒë√°nh gi√° m·ª©c ƒë·ªô "m·ªü"
    const walkableNeighbors = this.countWalkableNeighbors(position, gameState);
    if (walkableNeighbors <= 1) {
      score -= 50; // Ph·∫°t r·∫•t n·∫∑ng cho ng√µ c·ª•t
    } else if (walkableNeighbors === 2) {
      score -= 15; // Ph·∫°t nh·∫π cho c√°c v·ªã tr√≠ d·∫°ng h√†nh lang
    }

    return score;
  }

  private countNearbyWalls(
    position: any,
    gameState: GameState,
    radius: number
  ): number {
    let count = 0;

    for (let dx = -radius; dx <= radius; dx++) {
      for (let dy = -radius; dy <= radius; dy++) {
        const checkPos = {
          x: position.x + dx * CELL_SIZE,
          y: position.y + dy * CELL_SIZE,
        };
        if (
          gameState.map.walls.some(
            (wall) =>
              wall.position.x === checkPos.x && wall.position.y === checkPos.y
          ) ||
          (gameState.map.chests || []).some(
            (c) => c.position.x === checkPos.x && c.position.y === checkPos.y
          )
        ) {
          count++;
        }
      }
    }

    return count;
  }

  private getNearestEnemyDistance(position: any, gameState: GameState): number {
    let minDistance = Infinity;

    for (const enemy of gameState.enemies) {
      if (!enemy.isAlive) continue;

      const distance =
        Math.abs(position.x - enemy.position.x) +
        Math.abs(position.y - enemy.position.y);
      minDistance = Math.min(minDistance, distance);
    }

    return minDistance === Infinity ? 10 : minDistance;
  }

  private countNearbyItems(
    position: any,
    gameState: GameState,
    radius: number
  ): number {
    let count = 0;

    for (const item of gameState.map.items) {
      const distance =
        Math.abs(position.x - item.position.x) +
        Math.abs(position.y - item.position.y);

      if (distance <= radius * CELL_SIZE) {
        count++;
      }
    }

    return count;
  }

  /**
   * ƒê·∫øm s·ªë l∆∞·ª£ng √¥ tr·ªëng c√≥ th·ªÉ di chuy·ªÉn xung quanh m·ªôt v·ªã tr√≠.
   * Gi√∫p x√°c ƒë·ªãnh c√°c ng√µ c·ª•t (1 l·ªëi ƒëi) v√† h√†nh lang (2 l·ªëi ƒëi).
   * @param position V·ªã tr√≠ c·∫ßn ki·ªÉm tra.
   * @param gameState Tr·∫°ng th√°i game.
   * @returns S·ªë l∆∞·ª£ng √¥ c√≥ th·ªÉ di chuy·ªÉn ƒë∆∞·ª£c.
   */
  private countWalkableNeighbors(
    position: Position,
    gameState: GameState
  ): number {
    const directions = [
      Direction.UP,
      Direction.DOWN,
      Direction.LEFT,
      Direction.RIGHT,
    ];
    let walkableCount = 0;
    for (const direction of directions) {
      const neighborPos = getPositionInDirection(position, direction);
      if (canMoveTo(neighborPos, gameState)) {
        walkableCount++;
      }
    }
    return walkableCount;
  }
}
