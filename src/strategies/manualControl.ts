import * as readline from "readline";
import { SocketConnection } from "../connection/socketConnection";
import { Direction } from "../types";

/**
 * L·ªõp ƒëi·ªÅu khi·ªÉn bot th·ªß c√¥ng b·∫±ng b√†n ph√≠m ƒë·ªÉ debug.
 * - S·ª≠ d·ª•ng c√°c ph√≠m m≈©i t√™n ƒë·ªÉ di chuy·ªÉn.
 * - S·ª≠ d·ª•ng ph√≠m 'B' ƒë·ªÉ ƒë·∫∑t bom.
 * - S·ª≠ d·ª•ng ph√≠m 'Space' ƒë·ªÉ d·ª´ng l·∫°i.
 * - S·ª≠ d·ª•ng 'Ctrl + C' ƒë·ªÉ tho√°t.
 */
export class ManualControl {
  private socketConnection: SocketConnection;
  private isEnabled: boolean = false;

  constructor(socketConnection: SocketConnection) {
    this.socketConnection = socketConnection;
  }

  /**
   * K√≠ch ho·∫°t ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn th·ªß c√¥ng.
   * V√¥ hi·ªáu h√≥a logic AI v√† l·∫Øng nghe s·ª± ki·ªán t·ª´ b√†n ph√≠m.
   */
  public enable() {
    if (this.isEnabled) {
      console.log("üïπÔ∏è  Ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn th·ªß c√¥ng ƒë√£ ƒë∆∞·ª£c b·∫≠t.");
      return;
    }

    this.isEnabled = true;
    console.log(
      "üïπÔ∏è  K√≠ch ho·∫°t ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn th·ªß c√¥ng. S·ª≠ d·ª•ng c√°c ph√≠m m≈©i t√™n ƒë·ªÉ di chuy·ªÉn."
    );
    console.log("    - Ph√≠m 'B': ƒê·∫∑t bom");
    console.log("    - Ph√≠m 'Space': D·ª´ng di chuy·ªÉn");
    console.log("    - 'Ctrl + C': Tho√°t");

    // Thi·∫øt l·∫≠p ƒë·ªÉ ƒë·ªçc input t·ª´ b√†n ph√≠m
    readline.emitKeypressEvents(process.stdin);
    if (process.stdin.isTTY) {
      process.stdin.setRawMode(true);
    }

    process.stdin.on("keypress", this.handleKeyPress);
  }

  /**
   * V√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn th·ªß c√¥ng.
   */
  public disable() {
    if (!this.isEnabled) return;
    this.isEnabled = false;
    process.stdin.removeListener("keypress", this.handleKeyPress);
    if (process.stdin.isTTY) {
      process.stdin.setRawMode(false);
    }
    console.log("üïπÔ∏è  ƒê√£ t·∫Øt ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn th·ªß c√¥ng.");
  }

  // D√πng arrow function ƒë·ªÉ `this` tr·ªè ƒë√∫ng v√†o instance c·ªßa class
  private handleKeyPress = (str: string, key: any) => {
    // Tho√°t ch∆∞∆°ng tr√¨nh b·∫±ng Ctrl+C
    if (key.ctrl && key.name === "c") {
      console.log("üîå  ƒêang t·∫Øt bot...");
      this.socketConnection.disconnect();
      process.exit();
    }

    // X·ª≠ l√Ω c√°c ph√≠m ƒëi·ªÅu khi·ªÉn
    switch (key.name) {
      case "up":
        this.socketConnection.startContinuousMove(Direction.UP);
        break;
      case "down":
        this.socketConnection.startContinuousMove(Direction.DOWN);
        break;
      case "left":
        this.socketConnection.startContinuousMove(Direction.LEFT);
        break;
      case "right":
        this.socketConnection.startContinuousMove(Direction.RIGHT);
        break;
      case "b": // ƒê·∫∑t bom
        this.socketConnection.placeBomb();
        break;
      case "space": // D·ª´ng l·∫°i
        this.socketConnection.stopContinuousMove();
        break;
    }
  };
}
