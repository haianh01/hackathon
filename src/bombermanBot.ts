import { BombermanAI as BomberManAI } from "./ai";
import { GameEngine } from "./game";
import { BotDecision, BotAction, Direction, UserResponse } from "./types";
import { SocketConnection } from "./connection/socketConnection";

/**
 * Main Bot class - ƒëi·ªÉm v√†o ch√≠nh c·ªßa ·ª©ng d·ª•ng
 */
export class BomberManBot {
  private ai: BomberManAI;
  private gameEngine: GameEngine;
  private socketConnection: SocketConnection;
  private isRunning: boolean = false;
  private botLogicInterval: NodeJS.Timeout | undefined;

  constructor(serverAddress?: string, botToken?: string) {
    this.ai = new BomberManAI();
    this.gameEngine = new GameEngine();

    // S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ param ho·∫∑c env
    const address = serverAddress || "https://zarena-dev4.zinza.com.vn";
    const token = botToken || process.env.BOT_TOKEN || "";

    this.socketConnection = new SocketConnection(address, token);
  }

  /**
   * Kh·ªüi t·∫°o bot v√† b·∫Øt ƒë·∫ßu game
   */
  public async initialize(): Promise<void> {
    console.log("üöÄ Kh·ªüi t·∫°o Bomberman Bot...");

    try {
      // K·∫øt n·ªëi ƒë·∫øn game server
      await this.connectToServer();

      // Setup bot logic loop
      this.setupBotLogic();

      this.isRunning = true;
      console.log("‚úÖ Bot ƒë√£ s·∫µn s√†ng!");
    } catch (error) {
      console.error("‚ùå L·ªói khi kh·ªüi t·∫°o bot:", error);
      throw error;
    }
  }

  /**
   * K·∫øt n·ªëi ƒë·∫øn game server qua Socket.IO
   */
  private async connectToServer(): Promise<void> {
    console.log("üîå ƒêang k·∫øt n·ªëi ƒë·∫øn server...");

    // Setup callbacks
    this.socketConnection.onGameData((data: UserResponse) => {
      this.processGameData(data);
    });

    this.socketConnection.onGameStart(() => {
      console.log("üéÆ Game b·∫Øt ƒë·∫ßu!");
      this.isRunning = true;
    });

    this.socketConnection.onGameEnd(() => {
      console.log("üèÅ Game k·∫øt th√∫c!");
      if (!this.socketConnection.isDevelopment()) {
        this.isRunning = false;
      }
    });

    // Setup position update callback
    this.socketConnection.onPositionUpdate((x: number, y: number) => {
      console.log(`üìç Position updated: (${x}, ${y})`);
      // C√≥ th·ªÉ c·∫≠p nh·∫≠t game engine n·∫øu c·∫ßn
    });

    // Setup realtime event callbacks
    this.setupRealtimeEventCallbacks();

    // K·∫øt n·ªëi
    await this.socketConnection.connect();
    console.log("üîå ƒë√£ k·∫øt n·ªëi ƒë·∫øn server...");
  }

  /**
   * Setup callbacks cho c√°c s·ª± ki·ªán realtime
   */
  private setupRealtimeEventCallbacks(): void {
    // Callback khi c√≥ bom m·ªõi
    this.socketConnection.onNewBomb((data: any) => {
      console.log(`‚ö° Realtime: Bom m·ªõi t·∫°i (${data.x}, ${data.y})`);
      // TODO: C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c v√†o game state ƒë·ªÉ tr√°nh bom
      // this.gameEngine.addBombRealtime(data);
    });

    // Callback khi bom n·ªï
    this.socketConnection.onBombExplode((data: any) => {
      console.log(`‚ö° Realtime: Bom n·ªï t·∫°i (${data.x}, ${data.y})`);
      // TODO: X√≥a bom kh·ªèi danh s√°ch nguy hi·ªÉm
      // this.gameEngine.removeBombRealtime(data.id);
    });

    // Callback khi c√≥ item m·ªõi
    this.socketConnection.onChestDestroyed((data: any) => {
      console.log(`‚ö° Realtime: R∆∞∆°ng b·ªã ph√° t·∫°i (${data.x}, ${data.y})`);
      // TODO: Item c√≥ th·ªÉ xu·∫•t hi·ªán, c·∫ßn check l·∫°i
    });

    // Callback khi item ƒë∆∞·ª£c thu th·∫≠p
    this.socketConnection.onItemCollected((data: any) => {
      console.log(`‚ö° Realtime: Item ƒë∆∞·ª£c nh·∫∑t t·∫°i (${data.x}, ${data.y})`);
      // TODO: X√≥a item kh·ªèi target list n·∫øu c√≥
    });

    // Callback khi c√≥ ng∆∞·ªùi ch·∫øt
    this.socketConnection.onUserDie((data: any) => {
      const myBomber = this.socketConnection.getMyBomberInfo();

      // Ki·ªÉm tra n·∫øu bot b·ªã gi·∫øt
      if (data.killed.uid === myBomber?.uid) {
        console.log("üíÄ Bot ƒë√£ b·ªã ti√™u di·ªát!");
        this.isRunning = false;
      }

      // Ki·ªÉm tra n·∫øu bot gi·∫øt ƒë∆∞·ª£c ƒë·ªãch
      if (data.killer.uid === myBomber?.uid) {
        console.log(
          `üéâ Bot ƒë√£ h·∫° g·ª•c ${data.killed.name}! +${data.score} ƒëi·ªÉm`
        );
      }
    });
  }

  /**
   * Setup bot logic loop (ch·∫°y m·ªói 500ms)
   */
  private setupBotLogic(): void {
    this.botLogicInterval = setInterval(() => {
      this.executeBotLogic();
    }, 500);
  }

  /**
   * Th·ª±c hi·ªán logic bot
   */
  private executeBotLogic(): void {
    console.log(
      `üîç Executing bot logic - Game running: ${this.socketConnection.isGameRunning()}, Bot running: ${
        this.isRunning
      }`
    );

    if (!this.socketConnection.isGameRunning() || !this.isRunning) {
      return;
    }

    try {
      const gameState = this.gameEngine.getGameState();
      console.log(`üîç Game state cho AI:`, {
        currentBot: {
          id: gameState.currentBot.id,
          name: gameState.currentBot.name,
          position: gameState.currentBot.position,
        },
        enemies: gameState.enemies.length,
        bombs: gameState.map.bombs.length,
        items: gameState.map.items.length,
      });

      const decision = this.ai.makeDecision(gameState);
      console.log(`ü§ñ AI Decision:`, decision);

      this.executeAction(decision);
    } catch (error) {
      console.error("‚ùå L·ªói trong bot logic:", error);
    }
  }

  /**
   * Th·ª±c hi·ªán action d·ª±a tr√™n quy·∫øt ƒë·ªãnh c·ªßa AI
   */
  private executeAction(decision: BotDecision): void {
    switch (decision.action) {
      case BotAction.MOVE:
        if (decision.direction) {
          // ‚úÖ D√πng continuous move ƒë·ªÉ di chuy·ªÉn m∆∞·ª£t m√†
          this.socketConnection.startContinuousMove(decision.direction);
        }
        break;
      case BotAction.BOMB:
        // D·ª´ng di chuy·ªÉn tr∆∞·ªõc khi ƒë·∫∑t bom
        this.socketConnection.stopContinuousMove();
        this.socketConnection.placeBomb();
        break;
      case BotAction.STOP:
        // D·ª´ng di chuy·ªÉn khi c·∫ßn d·ª´ng
        this.socketConnection.stopContinuousMove();
        break;
      default:
        this.socketConnection.stopContinuousMove();
        break;
    }
  }

  /**
   * X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ server v√† c·∫≠p nh·∫≠t game state
   */
  private processGameData(gameData: UserResponse): void {
    try {
      // L·∫•y Socket ID t·ª´ connection
      const myBotInfo = this.socketConnection.getMyBomberInfo();
      const socketId = myBotInfo?.uid;

      console.log(`üîç Socket ID c·ªßa bot: ${socketId}`);
      // console.log(
      //   `üîç D·ªØ li·ªáu bombers:`,
      //   gameData.bombers?.map((b) => ({ name: b.name, uid: b.uid }))
      // );

      if (!socketId) {
        console.warn("‚ö†Ô∏è Ch∆∞a c√≥ th√¥ng tin bot, b·ªè qua update");
        return;
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i game v·ªõi Socket ID
      this.gameEngine.updateGameState(gameData, socketId);

      // Debug: Ki·ªÉm tra game state sau khi update
      const currentBot = this.gameEngine.getCurrentBot();
      console.log(`ü§ñ Current bot sau update:`, {
        id: currentBot.id,
        name: currentBot.name,
        position: currentBot.position,
        isAlive: currentBot.isAlive,
      });

      // Ki·ªÉm tra game c√≤n ch·∫°y kh√¥ng
      if (!this.gameEngine.isGameRunning()) {
        console.log("üèÅ Game ƒë√£ k·∫øt th√∫c ho·∫∑c bot kh√¥ng s·ªëng");
        console.log(`üîç Game running check:`, {
          timeRemaining: this.gameEngine.getGameState().timeRemaining,
          botAlive: currentBot.isAlive,
          enemiesAlive: this.gameEngine.getEnemies().filter((e) => e.isAlive)
            .length,
        });
        return;
      }

      // Log th√¥ng tin game (n·∫øu c·∫ßn)
      const stats = this.gameEngine.getGameStats();
      console.log(
        `üìä Stats: Score=${stats.currentBotScore}, Enemies=${
          stats.aliveBots - 1
        }`
      );
    } catch (error) {
      console.error("‚ùå L·ªói khi x·ª≠ l√Ω game data:", error);
    }
  }

  /**
   * Format action th√†nh string ƒë·ªÉ g·ª≠i v·ªÅ server
   */
  private formatAction(action: BotAction, direction?: Direction): string {
    // TODO: Format theo protocol c·ªßa game server
    // ƒê√¢y l√† example format

    switch (action) {
      case BotAction.MOVE:
        return `MOVE:${direction || Direction.STOP}`;
      case BotAction.BOMB:
        return "BOMB";
      case BotAction.STOP:
      default:
        return "STOP";
    }
  }

  /**
   * D·ª´ng bot v√† ng·∫Øt k·∫øt n·ªëi
   */
  public shutdown(): void {
    console.log("üõë ƒêang t·∫Øt bot...");

    this.isRunning = false;

    // Clear interval
    if (this.botLogicInterval) {
      clearInterval(this.botLogicInterval);
      this.botLogicInterval = undefined;
    }

    // Ng·∫Øt k·∫øt n·ªëi socket
    this.socketConnection.disconnect();

    console.log("‚úÖ Bot ƒë√£ t·∫Øt ho√†n to√†n");
  }

  /**
   * D·ª´ng bot t·∫°m th·ªùi (gi·ªØ k·∫øt n·ªëi)
   */
  public stop(): void {
    this.isRunning = false;
    console.log("‚è∏Ô∏è Bot ƒë√£ t·∫°m d·ª´ng");
  }

  /**
   * Ki·ªÉm tra bot c√≥ ƒëang ch·∫°y kh√¥ng
   */
  public isActive(): boolean {
    return this.isRunning && this.socketConnection.isConnected();
  }

  /**
   * Ki·ªÉm tra k·∫øt n·ªëi
   */
  public isConnected(): boolean {
    return this.socketConnection.isConnected();
  }

  /**
   * Ki·ªÉm tra game c√≥ ƒëang ch·∫°y kh√¥ng
   */
  public isGameRunning(): boolean {
    return this.socketConnection.isGameRunning();
  }

  /**
   * L·∫•y th√¥ng tin bot hi·ªán t·∫°i
   */
  public getBotInfo() {
    return this.socketConnection.getMyBomberInfo();
  }

  /**
   * L·∫•y th√¥ng tin AI strategies
   */
  public getAIInfo(): Array<{ name: string; priority: number }> {
    return this.ai.getStrategiesInfo();
  }

  /**
   * C·∫≠p nh·∫≠t priority c·ªßa strategy
   */
  public updateStrategyPriority(
    strategyName: string,
    priority: number
  ): boolean {
    return this.ai.updateStrategyPriority(strategyName, priority);
  }

  /**
   * Reset AI v·ªÅ m·∫∑c ƒë·ªãnh
   */
  public resetAI(): void {
    this.ai.resetStrategies();
    console.log("üîÑ AI ƒë√£ reset v·ªÅ m·∫∑c ƒë·ªãnh");
  }

  /**
   * L·∫•y th·ªëng k√™ game hi·ªán t·∫°i
   */
  public getGameStats() {
    return this.gameEngine.getGameStats();
  }

  /**
   * L·∫•y tr·∫°ng th√°i game hi·ªán t·∫°i (ƒë·ªÉ debug)
   */
  public getGameState() {
    return this.gameEngine.getGameState();
  }
}
