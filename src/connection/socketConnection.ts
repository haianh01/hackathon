import io from "socket.io-client";
import { Direction, UserResponse, Bomber } from "../types";

// Define the Socket type from socket.io-client
type SocketType = ReturnType<typeof io>;

/**
 * Socket.IO connection manager for Bomberman bot
 * D·ª±a tr√™n protocol c·ªßa hackathon
 */
export class SocketConnection {
  private socket: SocketType | null = null;
  private serverAddress: string;
  private token: string;
  private isGameStarted: boolean = true; // M·∫∑c ƒë·ªãnh true cho dev environment
  private myBomberInfo: Bomber | null = null;
  private onGameDataCallback?: (data: UserResponse) => void;
  private onGameStartCallback?: () => void;
  private onGameEndCallback?: () => void;
  private onPositionUpdateCallback?: (x: number, y: number) => void;
  private isDevelopmentMode: boolean = true;
  private lastMoveTime: number = 0;
  private moveThrottleMs: number = 200; // Gi·ªõi h·∫°n 1 move m·ªói 200ms
  private predictedPosition: { x: number; y: number } | null = null; // V·ªã tr√≠ d·ª± ƒëo√°n
  private lastConfirmedPosition: { x: number; y: number } | null = null; // V·ªã tr√≠ ƒë∆∞·ª£c server confirm

  constructor(serverAddress: string, token: string) {
    this.serverAddress = serverAddress;
    this.token = token;

    // Ki·ªÉm tra m√¥i tr∆∞·ªùng development
    this.isDevelopmentMode =
      serverAddress.includes("zarena-dev") ||
      serverAddress.includes("localhost") ||
      serverAddress.includes("127.0.0.1");

    if (this.isDevelopmentMode) {
      this.isGameStarted = true;
      console.log("üîß Development mode: Game s·∫Ω t·ª± ƒë·ªông ch·∫°y");
    } else {
      this.isGameStarted = false;
      console.log("üèÜ Competition mode: ƒê·ª£i s·ª± ki·ªán 'start'");
    }
  }

  /**
   * Kh·ªüi t·∫°o k·∫øt n·ªëi ƒë·∫øn server
   */
  public connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      console.log(`ƒêang c·ªë g·∫Øng k·∫øt n·ªëi t·ªõi ${this.serverAddress}...`);

      const auth = {
        token: this.token,
      };

      this.socket = io(this.serverAddress, {
        auth: auth,
        transports: ["websocket"],
      });

      this.socket.on("connect", () => {
        console.log(
          `‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Server! Socket ID: ${this.socket?.id}`
        );
        this.joinGameRoom();
        resolve();
      });
      // Setup event listeners NGAY SAU KHI t·∫°o socket
      this.setupEventListeners();

      this.socket.on("connect_error", (err: Error) => {
        console.error(`‚ùå L·ªói k·∫øt n·ªëi: ${err.message}`);
        reject(new Error(`Connection failed: ${err.message}`));
      });

      this.socket.on("disconnect", (reason: string) => {
        console.log(`‚ùå M·∫•t k·∫øt n·ªëi. L√Ω do: ${reason}`);
        this.isGameStarted = this.isDevelopmentMode;
      });
    });
  }

  /**
   * Thi·∫øt l·∫≠p c√°c event listener cho Socket.IO
   */
  private setupEventListeners(): void {
    if (!this.socket) return;

    // S·ª± ki·ªán: Nh·∫≠n th√¥ng tin ban ƒë·∫ßu sau khi tham gia ph√≤ng th√†nh c√¥ng
    this.socket.on("user", (data: UserResponse) => {
      console.log(
        "‚¨ÖÔ∏è Nh·∫≠n s·ª± ki·ªán 'user': Nh·∫≠n th√¥ng tin b·∫£n ƒë·ªì v√† tr·∫°ng th√°i game.",
        data
      );

      if (data.bombers && data.bombers.length > 0) {
        this.myBomberInfo =
          data.bombers.find((b) => b.uid === this.socket?.id) || null;
        if (this.myBomberInfo) {
          console.log(
            `ü§ñ Bot c·ªßa t√¥i (${this.myBomberInfo.name}) ƒë√£ s·∫µn s√†ng.`
          );
          console.log("üîç ===== CHI TI·∫æT BOT =====");
          console.log(`üìõ T√™n: ${this.myBomberInfo.name}`);
          console.log(`üÜî UID: ${this.myBomberInfo.uid}`);
          console.log(
            `üìç V·ªã tr√≠: (${this.myBomberInfo.x}, ${this.myBomberInfo.y})`
          );
          console.log(`üíØ ƒêi·ªÉm: ${this.myBomberInfo.score}`);
          console.log(`üíö S·ªëng: ${this.myBomberInfo.isAlive ? "C√≥" : "Kh√¥ng"}`);
          console.log(`‚ö° T·ªëc ƒë·ªô: ${this.myBomberInfo.speed}`);
          console.log(`üí£ S·ªë bom: ${this.myBomberInfo.bombCount}`);
          console.log(`üî• Ph·∫°m vi n·ªï: ${this.myBomberInfo.explosionRange}`);
          console.log("========================");

          // Update confirmed position
          this.lastConfirmedPosition = {
            x: this.myBomberInfo.x,
            y: this.myBomberInfo.y,
          };
        }
      }

      if (this.onGameDataCallback) {
        this.onGameDataCallback(data);
      }
    });

    // S·ª± ki·ªán: B·∫ÆT ƒê·∫¶U GAME (Ch·ªâ c√≥ ·ªü m√¥i tr∆∞·ªùng thi ƒë·∫•u)
    this.socket.on("start", (data: any) => {
      console.log(`üö® GAME B·∫ÆT ƒê·∫¶U! Th·ªùi gian: ${data.start_at}`);
      console.log("üìù L∆∞u √Ω: S·ª± ki·ªán 'start' ch·ªâ c√≥ trong m√¥i tr∆∞·ªùng thi ƒë·∫•u");
      this.isGameStarted = true;
      this.isDevelopmentMode = false;

      if (this.onGameStartCallback) {
        this.onGameStartCallback();
      }
    });

    // S·ª± ki·ªán: K·∫øt th√∫c Game
    this.socket.on("finish", (data: any) => {
      console.log("üèÅ GAME K·∫æT TH√öC!");

      if (this.isDevelopmentMode) {
        console.log("üîÑ Dev mode: Game s·∫Ω t·ª± ƒë·ªông reset sau 5 ph√∫t");
        setTimeout(() => {
          console.log("üîÑ Game ƒë√£ reset, ti·∫øp t·ª•c ch∆°i...");
          this.isGameStarted = true;
        }, 1000);
      } else {
        this.isGameStarted = false;
      }

      if (this.onGameEndCallback) {
        this.onGameEndCallback();
      }
    });

    // C√°c s·ª± ki·ªán game kh√°c
    this.socket.on("player_move", (data: any) => {
      // console.log(`‚¨ÖÔ∏è ${data.name} di chuy·ªÉn t·ªõi (${data.x}, ${data.y})`);

      // Option 1: Track real-time position updates
      if (data.uid === this.socket?.id) {
        console.log(`üéØ Bot di chuy·ªÉn: (${data.x}, ${data.y})`);
        this.lastConfirmedPosition = { x: data.x, y: data.y };

        // Update myBomberInfo if available
        if (this.myBomberInfo) {
          this.myBomberInfo.x = data.x;
          this.myBomberInfo.y = data.y;
        }

        // Notify callback if registered
        if (this.onPositionUpdateCallback) {
          this.onPositionUpdateCallback(data.x, data.y);
        }
      }
    });

    this.socket.on("new_bomb", (data: any) => {
      console.log(`‚¨ÖÔ∏è Bom m·ªõi ƒë∆∞·ª£c ƒë·∫∑t t·∫°i (${data.x}, ${data.y})`);
    });

    this.socket.on("bomb_explode", (data: any) => {
      console.log(`üí• Bom n·ªï t·∫°i (${data.x}, ${data.y})`);
    });

    this.socket.on("map_update", (data: any) => {
      // console.log("‚¨ÖÔ∏è C·∫≠p nh·∫≠t b·∫£n ƒë·ªì: R∆∞∆°ng v√† Item m·ªõi.");
    });

    this.socket.on("user_die_update", (data: any) => {
      console.log(
        `üíÄ Bot ${data.killed.name} ƒë√£ b·ªã h·∫° g·ª•c b·ªüi ${data.killer.name}!`
      );
    });

    this.socket.on("chest_destroyed", (data: any) => {
      console.log(`üì¶ R∆∞∆°ng b·ªã ph√° h·ªßy t·∫°i (${data.x}, ${data.y})`);
    });

    this.socket.on("item_collected", (data: any) => {
      console.log(`üéÅ Item ƒë∆∞·ª£c thu th·∫≠p t·∫°i (${data.x}, ${data.y})`);
    });

    this.socket.on("user_disconnect", (data: any) => {
      console.log(`üëã User ${data.name} ƒë√£ ng·∫Øt k·∫øt n·ªëi`);
    });
  }

  /**
   * Tham gia ph√≤ng ch∆°i
   * Event name: join
   * Data: {} (empty object)
   */
  private joinGameRoom(): void {
    console.log("‚û°Ô∏è G·ª≠i s·ª± ki·ªán 'join' ƒë·ªÉ tham gia ph√≤ng ch∆°i...");
    this.socket?.emit("join", {});
  }

  /**
   * G·ª≠i l·∫°i event join (public method ƒë·ªÉ g·ªçi t·ª´ b√™n ngo√†i n·∫øu c·∫ßn)
   */
  public rejoin(): void {
    if (this.socket && this.socket.connected) {
      console.log("‚û°Ô∏è G·ª≠i l·∫°i s·ª± ki·ªán 'join'...");
      this.socket.emit("join", {});
    } else {
      console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ join: Ch∆∞a k·∫øt n·ªëi v·ªõi server");
    }
  }

  /**
   * Di chuy·ªÉn bot theo h∆∞·ªõng
   */
  public move(direction: Direction): void {
    if (!this.isGameStarted || !this.socket) {
      return;
    }

    // Throttle ƒë·ªÉ tr√°nh spam request
    const now = Date.now();
    if (now - this.lastMoveTime < this.moveThrottleMs) {
      console.log(`‚è≥ Move b·ªã throttle, ƒë·ª£i ${this.moveThrottleMs}ms`);
      return;
    }

    // Option 2: Predict next position tr∆∞·ªõc khi g·ª≠i l·ªánh
    const currentPos = this.getCurrentPosition();
    if (currentPos) {
      const predictedPos = this.predictNextPosition(currentPos, direction);
      console.log(
        `üîÆ Predicted position: (${predictedPos.x}, ${predictedPos.y})`
      );

      // Store predicted position for optimistic update
      this.predictedPosition = predictedPos;
    }

    this.lastMoveTime = now;
    console.log(`‚û°Ô∏è G·ª≠i s·ª± ki·ªán 'move': ${direction}`);
    this.socket.emit("move", { orient: direction });
  }

  /**
   * D·ª± ƒëo√°n v·ªã tr√≠ ti·∫øp theo d·ª±a tr√™n direction
   * M·ªói l·∫ßn di chuy·ªÉn = 3 pixels
   */
  private predictNextPosition(
    currentPos: { x: number; y: number },
    direction: Direction
  ): { x: number; y: number } {
    const MOVE_STEP = 3; // Server di chuy·ªÉn 3px m·ªói l·∫ßn

    switch (direction) {
      case Direction.UP:
        return { x: currentPos.x, y: currentPos.y - MOVE_STEP };
      case Direction.DOWN:
        return { x: currentPos.x, y: currentPos.y + MOVE_STEP };
      case Direction.LEFT:
        return { x: currentPos.x - MOVE_STEP, y: currentPos.y };
      case Direction.RIGHT:
        return { x: currentPos.x + MOVE_STEP, y: currentPos.y };
      case Direction.STOP:
      default:
        return { x: currentPos.x, y: currentPos.y };
    }
  }

  /**
   * ƒê·∫∑t bom
   */
  public placeBomb(): void {
    if (this.isGameStarted && this.socket) {
      console.log("‚û°Ô∏è G·ª≠i s·ª± ki·ªán 'place_bomb'");
      this.socket.emit("place_bomb", {});
    }
  }

  /**
   * Ng·∫Øt k·∫øt n·ªëi
   */
  public disconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isGameStarted = false;
      console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi");
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
   */
  public isConnected(): boolean {
    return this.socket?.connected || false;
  }

  /**
   * Ki·ªÉm tra game c√≥ ƒëang ch·∫°y kh√¥ng
   */
  public isGameRunning(): boolean {
    return this.isGameStarted;
  }

  /**
   * Ki·ªÉm tra c√≥ ph·∫£i m√¥i tr∆∞·ªùng development kh√¥ng
   */
  public isDevelopment(): boolean {
    return this.isDevelopmentMode;
  }

  /**
   * L·∫•y th√¥ng tin bomber hi·ªán t·∫°i
   */
  public getMyBomberInfo(): Bomber | null {
    return this.myBomberInfo;
  }

  /**
   * ƒêƒÉng k√Ω callback cho d·ªØ li·ªáu game
   */
  public onGameData(callback: (data: UserResponse) => void): void {
    this.onGameDataCallback = callback;
  }

  /**
   * ƒêƒÉng k√Ω callback cho s·ª± ki·ªán game b·∫Øt ƒë·∫ßu
   */
  public onGameStart(callback: () => void): void {
    this.onGameStartCallback = callback;
  }

  /**
   * ƒêƒÉng k√Ω callback cho s·ª± ki·ªán game k·∫øt th√∫c
   */
  public onGameEnd(callback: () => void): void {
    this.onGameEndCallback = callback;
  }

  /**
   * ƒêƒÉng k√Ω callback cho position update
   */
  public onPositionUpdate(callback: (x: number, y: number) => void): void {
    this.onPositionUpdateCallback = callback;
  }

  /**
   * L·∫•y v·ªã tr√≠ hi·ªán t·∫°i (predicted ho·∫∑c confirmed)
   */
  public getCurrentPosition(): { x: number; y: number } | null {
    // ∆Øu ti√™n v·ªã tr√≠ ƒë∆∞·ª£c confirm t·ª´ server
    if (this.lastConfirmedPosition) {
      return { ...this.lastConfirmedPosition };
    }

    // Fallback sang predicted position
    if (this.predictedPosition) {
      return { ...this.predictedPosition };
    }

    // Fallback sang myBomberInfo
    if (this.myBomberInfo) {
      return { x: this.myBomberInfo.x, y: this.myBomberInfo.y };
    }

    return null;
  }
}
