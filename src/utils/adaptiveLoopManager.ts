/**
 * Adaptive Loop Manager - Qu·∫£n l√Ω v√≤ng l·∫∑p bot v·ªõi t·∫ßn su·∫•t linh ho·∫°t
 * Cho ph√©p bot ph·∫£n ·ª©ng nhanh h∆°n khi c·∫ßn thi·∫øt (v√≠ d·ª•: g·∫ßn bom)
 */

export enum LoopPriority {
  EMERGENCY = 100, // Nguy hi·ªÉm kh·∫©n c·∫•p (v√≠ d·ª•: bom s·∫Øp n·ªï)
  HIGH = 200, // ∆Øu ti√™n cao (v√≠ d·ª•: attack, defense)
  NORMAL = 500, // B√¨nh th∆∞·ªùng (explore, collect)
  LOW = 1000, // Th·∫•p (idle)
}

export interface LoopCallback {
  (): void;
}

export class AdaptiveLoopManager {
  private mainInterval: NodeJS.Timeout | null = null;
  private currentPriority: LoopPriority = LoopPriority.NORMAL;
  private callback: LoopCallback | null = null;
  private isRunning: boolean = false;
  private emergencyTimeout: NodeJS.Timeout | null = null;

  /**
   * B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p v·ªõi t·∫ßn su·∫•t m·∫∑c ƒë·ªãnh
   * @param callback H√†m callback ƒë∆∞·ª£c g·ªçi m·ªói l·∫ßn l·∫∑p
   * @param initialInterval Kho·∫£ng th·ªùi gian ban ƒë·∫ßu (ms)
   */
  public start(
    callback: LoopCallback,
    initialInterval: number = LoopPriority.NORMAL
  ): void {
    this.callback = callback;
    this.currentPriority = initialInterval as LoopPriority;
    this.isRunning = true;

    // Kh·ªüi t·∫°o interval
    this.restartInterval();

    console.log(`üîÑ Adaptive loop started with interval: ${initialInterval}ms`);
  }

  /**
   * D·ª´ng v√≤ng l·∫∑p
   */
  public stop(): void {
    this.isRunning = false;

    if (this.mainInterval) {
      clearInterval(this.mainInterval);
      this.mainInterval = null;
    }

    if (this.emergencyTimeout) {
      clearTimeout(this.emergencyTimeout);
      this.emergencyTimeout = null;
    }

    console.log("‚èπÔ∏è Adaptive loop stopped");
  }

  /**
   * Thay ƒë·ªïi t·∫ßn su·∫•t v√≤ng l·∫∑p d·ª±a tr√™n priority
   * @param priority M·ª©c ƒë·ªô ∆∞u ti√™n (c√†ng cao c√†ng nhanh)
   */
  public setPriority(priority: LoopPriority): void {
    if (this.currentPriority === priority) {
      return; // Kh√¥ng c·∫ßn thay ƒë·ªïi
    }

    console.log(
      `üîÑ Loop priority changed: ${this.currentPriority}ms ‚Üí ${priority}ms`
    );

    this.currentPriority = priority;
    this.restartInterval();
  }

  /**
   * Trigger v√≤ng l·∫∑p kh·∫©n c·∫•p ngay l·∫≠p t·ª©c
   * S·ª≠ d·ª•ng khi c·∫ßn ph·∫£n ·ª©ng nhanh (v√≠ d·ª•: bom m·ªõi xu·∫•t hi·ªán g·∫ßn bot)
   */
  public triggerEmergency(): void {
    if (!this.isRunning || !this.callback) {
      return;
    }

    // Clear emergency timeout c≈© n·∫øu c√≥
    if (this.emergencyTimeout) {
      clearTimeout(this.emergencyTimeout);
    }

    // Th·ª±c thi callback ngay l·∫≠p t·ª©c
    console.log("üö® Emergency loop triggered!");
    this.callback();

    // Chuy·ªÉn sang priority EMERGENCY trong 2 gi√¢y
    const previousPriority = this.currentPriority;
    this.setPriority(LoopPriority.EMERGENCY);

    // Sau 2 gi√¢y, quay l·∫°i priority tr∆∞·ªõc ƒë√≥
    this.emergencyTimeout = setTimeout(() => {
      this.setPriority(previousPriority);
    }, 2000);
  }

  /**
   * Trigger v√≤ng l·∫∑p ti·∫øp theo ngay l·∫≠p t·ª©c (one-time)
   * S·ª≠ d·ª•ng khi c·∫ßn update ngay m√† kh√¥ng thay ƒë·ªïi priority
   */
  public triggerNext(): void {
    if (!this.isRunning || !this.callback) {
      return;
    }

    console.log("‚ö° Immediate loop triggered");
    this.callback();
  }

  /**
   * L·∫•y priority hi·ªán t·∫°i
   */
  public getCurrentPriority(): LoopPriority {
    return this.currentPriority;
  }

  /**
   * Ki·ªÉm tra xem loop c√≥ ƒëang ch·∫°y kh√¥ng
   */
  public getIsRunning(): boolean {
    return this.isRunning;
  }

  /**
   * Restart interval v·ªõi priority m·ªõi
   */
  private restartInterval(): void {
    // Clear interval c≈©
    if (this.mainInterval) {
      clearInterval(this.mainInterval);
    }

    if (!this.isRunning || !this.callback) {
      return;
    }

    // T·∫°o interval m·ªõi v·ªõi priority hi·ªán t·∫°i
    this.mainInterval = setInterval(() => {
      if (this.callback) {
        this.callback();
      }
    }, this.currentPriority);
  }

  /**
   * Auto-adjust priority d·ª±a tr√™n game state
   * @param hasBombsNearby C√≥ bom g·∫ßn kh√¥ng
   * @param hasEnemiesNearby C√≥ enemy g·∫ßn kh√¥ng
   * @param hasItemsNearby C√≥ item g·∫ßn kh√¥ng
   */
  public autoAdjustPriority(
    hasBombsNearby: boolean,
    hasEnemiesNearby: boolean,
    hasItemsNearby: boolean
  ): void {
    if (hasBombsNearby) {
      // Nguy hi·ªÉm kh·∫©n c·∫•p - ph·∫£n ·ª©ng c·ª±c nhanh
      this.setPriority(LoopPriority.EMERGENCY);
    } else if (hasEnemiesNearby) {
      // C√≥ enemy g·∫ßn - ∆∞u ti√™n cao
      this.setPriority(LoopPriority.HIGH);
    } else if (hasItemsNearby) {
      // C√≥ item g·∫ßn - b√¨nh th∆∞·ªùng
      this.setPriority(LoopPriority.NORMAL);
    } else {
      // Kh√¥ng c√≥ g√¨ - th·∫•p
      this.setPriority(LoopPriority.LOW);
    }
  }
}
