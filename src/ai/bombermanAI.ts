import { GameState, BotDecision, BotAction, Direction } from "../types";
import {
  BotStrategy,
  EscapeStrategy,
  AttackStrategy,
  CollectStrategy,
  ExploreStrategy,
  DefensiveStrategy,
  WallBreakerStrategy,
  SmartNavigationStrategy,
  BombStrategy,
} from "../strategies";

/**
 * AI Engine ch√≠nh ƒë·ªÉ ƒëi·ªÅu khi·ªÉn bot
 */
export class BombermanAI {
  private strategies: BotStrategy[];

  constructor() {
    // Kh·ªüi t·∫°o t·∫•t c·∫£ c√°c strategies theo th·ª© t·ª± ∆∞u ti√™n
    this.strategies = [
      new EscapeStrategy(), // ∆Øu ti√™n cao nh·∫•t - tho√°t hi·ªÉm
      new BombStrategy(), // ƒê·∫∑t bom th√¥ng minh
      new AttackStrategy(), // T·∫•n c√¥ng k·∫ª th√π
      new DefensiveStrategy(), // Ph√≤ng th·ªß
      new CollectStrategy(), // Thu th·∫≠p v·∫≠t ph·∫©m
      new WallBreakerStrategy(), // Ph√° t∆∞·ªùng
      new SmartNavigationStrategy(), // ƒêi·ªÅu h∆∞·ªõng th√¥ng minh
      new ExploreStrategy(), // Kh√°m ph√° b·∫£n ƒë·ªì
    ];
  }

  /**
   * ƒê∆∞a ra quy·∫øt ƒë·ªãnh cho bot d·ª±a tr√™n tr·∫°ng th√°i game hi·ªán t·∫°i
   */
  public makeDecision(gameState: GameState): BotDecision {
    const decisions: BotDecision[] = [];

    // L·∫•y quy·∫øt ƒë·ªãnh t·ª´ t·∫•t c·∫£ strategies
    for (const strategy of this.strategies) {
      // console.log(
      //   "%cü§™ ~ file: bombermanAI.ts:39 [] -> strategy : ",
      //   "color: #4b2b6a",
      //   strategy
      // );
      try {
        const decision = strategy.evaluate(gameState);
        console.log(
          "%cü§™ ~ file: bombermanAI.ts:41 [] -> decision : ",
          "color: #22e856",
          decision
        );
        if (decision) {
          decisions.push(decision);
        }
      } catch (error) {
        console.error(`L·ªói trong strategy ${strategy.name}:`, error);
      }
    }

    // N·∫øu kh√¥ng c√≥ quy·∫øt ƒë·ªãnh n√†o, ƒë·ª©ng y√™n
    if (decisions.length === 0) {
      return {
        action: BotAction.STOP,
        direction: Direction.STOP,
        priority: 0,
        reason: "Kh√¥ng c√≥ chi·∫øn thu·∫≠t ph√π h·ª£p - ƒë·ª©ng y√™n",
      };
    }

    // S·∫Øp x·∫øp theo priority (cao nh·∫•t tr∆∞·ªõc)
    decisions.sort((a, b) => b.priority - a.priority);

    // Tr·∫£ v·ªÅ quy·∫øt ƒë·ªãnh c√≥ priority cao nh·∫•t
    const bestDecision = decisions[0]!;

    // Log ƒë·ªÉ debug
    console.log(
      `ü§ñ Bot quy·∫øt ƒë·ªãnh: ${bestDecision.reason} (Priority: ${bestDecision.priority})`
    );

    return bestDecision;
  }

  /**
   * Th√™m strategy t√πy ch·ªânh
   */
  public addStrategy(strategy: BotStrategy): void {
    this.strategies.push(strategy);
    // S·∫Øp x·∫øp l·∫°i theo priority
    this.strategies.sort((a, b) => b.priority - a.priority);
  }

  /**
   * X√≥a strategy theo t√™n
   */
  public removeStrategy(name: string): void {
    this.strategies = this.strategies.filter((s) => s.name !== name);
  }

  /**
   * L·∫•y th√¥ng tin v·ªÅ t·∫•t c·∫£ strategies
   */
  public getStrategiesInfo(): Array<{ name: string; priority: number }> {
    return this.strategies.map((s) => ({
      name: s.name,
      priority: s.priority,
    }));
  }

  /**
   * C·∫≠p nh·∫≠t priority c·ªßa m·ªôt strategy
   */
  public updateStrategyPriority(name: string, newPriority: number): boolean {
    const strategy = this.strategies.find((s) => s.name === name);
    if (strategy) {
      strategy.priority = newPriority;
      // S·∫Øp x·∫øp l·∫°i theo priority
      this.strategies.sort((a, b) => b.priority - a.priority);
      return true;
    }
    return false;
  }

  /**
   * Reset t·∫•t c·∫£ strategies v·ªÅ m·∫∑c ƒë·ªãnh
   */
  public resetStrategies(): void {
    this.strategies = [
      new EscapeStrategy(),
      new AttackStrategy(),
      new CollectStrategy(),
      new ExploreStrategy(),
    ];
  }
}
